#version 330 core

// Take in a diffuse color map and a normal map
uniform sampler2D albedo_sampler;
uniform sampler2D normal_sampler;

// The camera position, light direction and if we have a normal map
uniform vec3 camera_pos;
uniform vec3 light_dir;
uniform bool has_normalmap;
uniform bool has_texture;
uniform bool is_lit;
uniform vec4 constant_diffuse_in;

// These values passed through from the vertex shader
in vec3 frag_pos_world;
in vec3 frag_normal;
in vec2 frag_tex_coord;
in vec4 frag_color;

// The output color
out vec4 color;

mat3 cotangent_frame( vec3 N, vec3 p, vec2 uv )
{
    // get edge vectors of the pixel triangle
    vec3 dp1 = dFdx( p );
    vec3 dp2 = dFdy( p );
    vec2 duv1 = dFdx( uv );
    vec2 duv2 = dFdy( uv );
 
    // solve the linear system
    vec3 dp2perp = cross( dp2, N );
    vec3 dp1perp = cross( N, dp1 );
    vec3 T = dp2perp * duv1.x + dp1perp * duv2.x;
    vec3 B = dp2perp * duv1.y + dp1perp * duv2.y;

    T = -T;
    B = -B;

    // construct a scale-invariant frame 
    float invmax = inversesqrt( max( dot(T,T), dot(B,B) ) );
    return mat3( T * invmax, B * invmax, N );
}

vec3 perturb_normal( vec3 N, vec3 V, vec2 texcoord )
{
    // assume N, the interpolated vertex normal and 
    // V, the view vector (vertex to eye)
    vec3 map = texture( normal_sampler, texcoord ).xyz * 2.0f - 1.0f;
    mat3 TBN = cotangent_frame( N, -V, texcoord );
    return normalize( TBN * map );
}

vec3 RemoveSRGBCurve( vec3 x )
{
    return pow(x, vec3(2.2));
}

// A simple ambient light factor; easy lighting.
vec3 SkyDirection = vec3(0.0f,1.0f,0.0f);
vec4 Gc = vec4(0.05f,.05f,0.05f,1.0f);
vec4 Sc = vec4(0.95f,0.95f,1.0f,1.0f);
float Hi = 0.75f;
vec3 SkyAmbient(vec3 N)
{
    float vecHemi = (dot(N, SkyDirection) * 0.5f ) + 0.5f;
    return (Hi * mix(Gc, Sc, vecHemi)).rgb;
}

void main()
{
    // Sample the diffuse map
    vec4 diffuse = constant_diffuse_in * frag_color;
    if (has_texture)
    {
        diffuse = texture(albedo_sampler, frag_tex_coord).rgba * diffuse;
    }

    if (diffuse.a == 0)
    {
        discard;
    }

    // Sample the normal map
    vec3 normal;
    if (has_normalmap)
    {
        normal = perturb_normal(frag_normal, camera_pos - frag_pos_world, frag_tex_coord);
    }
    else
    {
        normal = frag_normal;
    }

    if (is_lit)
    {
    // Do a simple ambient light calculation
    vec3 illuminance = diffuse.rgb * SkyAmbient(frag_normal);

    // Implement a 'highlight' spotlight facing away from the viewer
    vec3 light_pos = camera_pos;

    // Light vector.
    vec3 L = light_pos - frag_pos_world;
    
    // Normalize light vector.
    L = normalize(L);

    // cone fall-off 
    float cosDir = max(dot(L, -light_dir), 0.0f);
    float spotEffect = pow(cosDir, 20) * .45f; 
   
    // Brightness 
    float lambertian = max(dot(L, normal), 0.0);
    if(lambertian > 0.0)
    {
        // Specular
        vec3 viewDir = normalize(camera_pos - frag_pos_world);
        vec3 halfDir = normalize(L + viewDir);
        float specAngle = max(dot(halfDir, normal), 0.0);
        float specular = pow(specAngle, 36.0) * .8f;  

        // Final lighting calculation: diffuse + specular
        illuminance += spotEffect * (lambertian * diffuse.rgb);
        illuminance += spotEffect * specular;
    }

    color = vec4(illuminance, diffuse.a);
   }
   else
   {
    color = diffuse;
   }

   // Back to SRGB
   color.rgb = pow(color.rgb, vec3(1.0f / 2.2f));

}