#pragma once
#include "utils/file/file.h"
#include "opus.h"
#include "compile.h"

namespace cpptoml
{
class table;
}

namespace Mgfx
{

/*
enum class GeometryType
{
    FSQuad,
    Sphere,
    Cube,
    Teapot,
    Torus
};

struct GeometryAsset : OpusAssetBase
{
    GeometryAsset(GeometryType t, PassAsset* pParent)
        : OpusAssetBase(pParent),
        type(t)
    {
    }
    
    // Compile a path to an OpusAsset data
    virtual std::future<std::shared_ptr<CompiledAsset>> Compile() override;

    // Apply a compile result to this asset - Always Runs on the UI thread!
    virtual void Apply(std::shared_ptr<CompiledAsset> spResult) override;

    virtual const char* Name() const
    {
        return "Geometry";
    }

    GeometryType type = GeometryType::FSQuad;
};
*/

}
